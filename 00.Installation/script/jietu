#!/bin/bash
#
# https://github.com/Aniverse/inexistence
# Author: Aniverse
#
Date=2019.01.22
Version=2.1.6
# --------------------------------------------------------------------------------
# If you would like to change the output path,
# sets CustomedOutput=1，then write your output path to OUTPUT
CustomedOutput=0
OUTPUT="/replace/here/with/your/output/path"
# --------------------------------------------------------------------------------

function Deprecated() {
    DW=$VideoHeight
    DARW=` echo $DAR | sed "s/[0-9]\{1,\}://" `
    DARH=` echo $DAR | sed "s/:[0-9]\{1,\}//" `
  # DH0=` expr $VideoHeight / $DARW  `
  # DH=` expr $DH0 \* $DARH  `
    DH=` echo "$VideoHeight/$DARW*$DARH" | bc -l | awk '{print int($0)}' `

    echo -n "${yellow}${bold}The correct resolution should be ${underline}$fenbianlv${reset_underline},${normal} [${cyan}T${normal}]rue or [F]alse " ; read responce
    case $responce in
        [Tt] | [Tt][Ru][Uu][eE]     )  echo -e "The script will take 10 screenshots in $fenbianlv" ;;
        [Ff] | [Ff][Aa][Ll][Ss][Ee] )  resolution=input ;;
        ""   | *                    )  echo -e "The script will take 10 screenshots in $fenbianlv" ;;
    esac

}


# Colors
black=$(tput setaf 0); red=$(tput setaf 1); green=$(tput setaf 2); yellow=$(tput setaf 3); blue=$(tput setaf 4); magenta=$(tput setaf 5); cyan=$(tput setaf 6); white=$(tput setaf 7); bold=$(tput bold); normal=$(tput sgr0); underline=$(tput smul); reset_underline=$(tput rmul); jiacu=${normal}${bold}

mediapath="$1" ; fenbianlv="$2"

[[ ! ` command -v bc ` ]] && echo -e "\n${red}${bold}ERROR${jiacu} bc not found, please install it or set it to your \$PATH\n${normal}" && exit 1
[[ ! ` command -v ffmpeg ` ]] && echo -e "\n${red}${bold}ERROR${jiacu} ffmpeg not found, please install it or set it to your \$PATH\n${normal}" && exit 1
[[ ! ` command -v mediainfo ` ]] && echo -e "\n${red}${bold}ERROR${jiacu} mediainfo not found, please install it or set it to your \$PATH\n${normal}" && exit 1
[[ $EUID != 0 ]] && [[ $CustomedOutput == 0 ]] && echo -e "\n${red}${bold}ERROR${jiacu} Please edit this script to set output path first\n${normal}" && exit 1

[[ "$mediapath" == "" ]] && echo -e "\n${red}${bold}WARNING${jiacu} You must input the path to your file with double quotes\n${normal}" && exit 1
[[ ! ` ls "$mediapath" 2>/dev/null ` ]] && echo -e "\n${red}${bold}WARNING${jiacu} This file or dictionary doesn't exist, or it's empty\n${normal}" && exit 1
[[ -d "$mediapath" ]] && mediapath=`  find "$mediapath" -type f -print0 | xargs -0 ls -1S 2>&1 | head -n1  ` &&
echo -e "\n${red}${bold}ATTENTION${normal} You have input a dictionary, so we find the biggest file for taking screenshots\nThat file is ${underline}${mediapath}${reset_underline}\n${normal}"





# test mode
[[ $fenbianlv == -t ]] && {


VideoResolution=$( ffmpeg -i "$mediapath" 2>&1 | grep -E "Stream.*Video" | grep -Eo "[0-9]{2,5}x[0-9]{2,5}" )
VideoWidth=$( echo $VideoResolution | sed "s/x[0-9]\{2,\}//" )
VideoHeight=$( echo $VideoResolution | sed "s/[0-9]\{2,\}x//" )
DAR=$( ffmpeg -i "$mediapath" 2>&1 | grep -Eo "DAR [0-9]+:[0-9]+" | sed "s/DAR //" )
DARW=$( echo $DAR | sed "s/[0-9]\{1,\}://" )
DARH=$( echo $DAR | sed "s/:[0-9]\{1,\}//" )
SAR=$( ffmpeg -i "$mediapath" 2>&1 | grep -Eo "SAR [0-9]+:[0-9]+" | sed "s/SAR //" )
SARW=$( echo $SAR | sed "s/[0-9]\{1,\}://" )
SARH=$( echo $SAR | sed "s/:[0-9]\{1,\}//" )
PAR=$( mediainfo -f "$mediapath" 2>&1 | grep -i "Pixel aspect ratio" | grep -oE "[0-9.]+" )

# 第一种，720×480 16:9，算出来 720×405
# $VideoWidth/$DARH*$DARW=720÷16×9=405
DAR1_W=$VideoWidth
DAR1_H_BC=$( echo "$VideoWidth/$DARH*$DARW" | bc -l | awk '{print int($0)}' )
DAR1_H=$( expr $(expr $VideoWidth / $DARH) \* $DARW )
DAR1_R_BC="${DAR1_W}x${DAR1_H_BC}"
DAR1_R="${DAR1_W}x${DAR1_H}"

# 第二种，720×480 16:9，算出来 853×480
# $VideoHeight/$DARW*$DARH=480÷9×16=853
DAR2_H=$VideoHeight
DAR2_W_BC=$( echo "$VideoHeight/$DARW*$DARH" | bc -l | awk '{print int($0)}' )
DAR2_W=$( expr $(expr $VideoHeight / $DARW) \* $DARH )
DAR2_R_BC="${DAR2_W_BC}x${DAR2_H}"
DAR2_R="${DAR2_W}x${DAR2_H}"

# 第三种，看 SAR，720×480 32:27，算出来 853×480
# $VideoWidth/$SARW*$SARH=720÷27×32=853
SAR1_H=$VideoWidth
SAR1_W_BC=$( echo "$VideoHeight/$SARW*$SARH" | bc -l | awk '{print int($0)}' )
SAR1_W=$( expr $(expr $VideoWidth / $SARH) \* $SARW )
SAR1_R_BC="${DAR2_W_BC}x${DAR2_H}"
SAR1_R="${DAR2_W}x${DAR2_H}"

echo -e "
${cyan}${bold}FileName               ${yellow}$mediapath
${cyan}${bold}VideoResolution        ${yellow}$VideoResolution
${cyan}${bold}Display Aspect Ratio   ${yellow}$DAR
${cyan}${bold}Sample  Aspect Ratio   ${yellow}$SAR
${cyan}${bold}DAR-1 Resolution (bc)  ${yellow}$DAR1_R_BC
${cyan}${bold}DAR-1 Resolution       ${yellow}$DAR1_R
${cyan}${bold}DAR-2 Resolution (bc)  ${yellow}$DAR2_R_BC
${cyan}${bold}DAR-2 Resolution       ${yellow}$DAR2_R
${cyan}${bold}SAR   Resolution (bc)  ${yellow}$SAR1_R_BC
${cyan}${bold}SAR   Resolution       ${yellow}$SAR1_R
${red}
mediapath=\"$mediapath\"
ffmpeg -i \"\$mediapath\"
${normal}"
exit 0 ; }





file_title=$(basename "$mediapath")
file_title_clean="$(echo "$file_title" | tr '[:space:]' '.')"
file_title_clean="$(echo "$file_title_clean" | sed s'/[.]$//')"
file_title_clean="$(echo "$file_title_clean" | tr -d '(')"
file_title_clean="$(echo "$file_title_clean" | tr -d ')')"

# Calculating resolution
if [[ "$fenbianlv" == "" ]]; then
    echo -ne "${bold}Calculating resolution ...${normal} "
    VideoResolution=$( ffmpeg -i "$mediapath" 2>&1 | grep -E "Stream.*Video" | grep -Eo "[0-9]{2,5}x[0-9]{2,5}" )
    echo -ne "\nOriginal resolution is ${underline}${bold}$VideoResolution${normal}${reset_underline}, "
    VideoWidth=$( echo $VideoResolution | sed "s/x[0-9]\{2,\}//" )
    VideoHeight=$( echo $VideoResolution | sed "s/[0-9]\{2,\}x//" )
    DAR=$( ffmpeg -i "$mediapath" 2>&1 | grep -Eo "DAR [0-9]+:[0-9]+" | sed "s/DAR //" )
    echo -e "Display aspect ratio is ${underline}${bold}${DAR}${normal}${reset_underline}"
    DW=$VideoWidth
    DARW=$( echo $DAR | sed "s/[0-9]\{1,\}://" )
    DARH=$( echo $DAR | sed "s/:[0-9]\{1,\}//" )

    [[   $(command -v bc) ]] && DH=$( echo "$VideoWidth/$DARH*$DARW" | bc -l | awk '{print int($0)}' )
    [[ ! $(command -v bc) ]] && DH=$( expr $(expr $VideoWidth / $DARH) \* $DARW )

    fenbianlv="${DW}x${DH}"
    echo -e "The correct resolution should be ${underline}${bold}${fenbianlv}${normal}${reset_underline}\n"
fi

# Calculating timestampsetting
duration1=$(ffmpeg -i "$mediapath" 2>&1 | egrep '(Duration:)' | cut -d ' ' -f4 | cut -c1-8)
duration2=`date -u -d "1970-01-01 $duration1" +%s`
if [[ "${duration2}" -ge 3600 ]]; then
    timestampsetting=331
elif [[ "${duration2}" -ge 1500 && "${duration2}" -lt 3600 ]]; then
    timestampsetting=121
elif [[ "${duration2}" -ge 600 && "${duration2}" -lt 1500 ]]; then
    timestampsetting=71
elif [[ "${duration2}" -lt 600 ]]; then
    timestampsetting=21
fi

[[   $CustomedOutput == 0 ]] && mkdir -p "/etc/inexistence/07.Screenshots" && outputpath="/etc/inexistence/07.Screenshots"
[[ ! $CustomedOutput == 0 ]] && mkdir -p "$OUTPUT" && outputpath="$OUTPUT"

echo

# Screenshots
for c in {01..10} ; do

    i=`expr $i + $timestampsetting` ; timestamp=`date -u -d @$i +%H:%M:%S`
    echo -n "Writing ${blue}${file_title_clean}.scr${c}.png${normal} from timestamp ${blue}${timestamp}${normal} ...  "
  # ffmpeg -y -ss $timestamp -i "$mediapath" -vframes 1 -s $fenbianlv "${outputpath}/${file_title_clean}.scr${c}.png" > /dev/null 2>&1
    ffmpeg -y -ss $timestamp -i "$mediapath" -ss 00:00:01 -frames:v 1 -s $fenbianlv "${outputpath}/${file_title_clean}.scr${c}.png" > /dev/null 2>&1
    echo -e "${green}DONE${normal}"

    [[ $(command -v nconvert) ]] && {
    echo -n "Compressing ${blue}${file_title_clean}.scr${c}.png${normal} ${normal} ...  "
    nconvert -out png -clevel 6 -o "${outputpath}/${file_title_clean}.scr${c}_1.png" "${outputpath}/${file_title_clean}.scr${c}.png" > /dev/null 2>&1
    mv -f "${outputpath}/${file_title_clean}.scr${c}_1.png" "${outputpath}/${file_title_clean}.scr${c}.png" > /dev/null 2>&1
    echo -e "${green}DONE${normal}" ; }

done

# mediainfo
echo -ne "\nWriting ${blue}${file_title_clean}.mediainfo.txt${normal} ...  "
mediainfo "$mediapath" > "${outputpath}/${file_title_clean}.mediainfo.txt"
sed -i '/${outputpath}\//'d "${outputpath}/${file_title_clean}.mediainfo.txt"
echo -e "${green}DONE${normal}"

# finished
echo -e "\n${bold}Done. Outputs are stored in ${yellow}\"${outputpath}\"${normal}\n"

