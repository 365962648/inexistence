#!/bin/bash
#
# https://github.com/Aniverse/inexistence
# Author: Aniverse

script_update=2019.07.13
script_version=r10001

################################################################################################ Debug

usage_for_debug() {
    export local_packages=/etc/inexistence/00.Installation
    export s=$local_packages/package/qbittorrent/install
    rm -f $s ; nano $s
    bash $s -m apt        --logbase $LogTimes
}

################################################################################################ Get options

unset AppName AppNameLower Need_SourceCode pm_action \
      LogRootPath LogTimes DebLocation SCLocation LOCKLocation OutputLOG \
      lt_version version mode debug

function show_usage() { echo " Invalid option $1
Usage:
      -m        Install mode, can only be specified as apt, ppa or source
      -t        Install type, can only be specified as desktop or headless
      -v        Specifiy which version of qBittorrent to be installed
      --debug   Enable debug mode
                Note that installing specific version may cause the installation failure
"
exit 1 ; }

OPTS=$(getopt -o m:v:l:t:d --long debug,mode:,type:,version:,logbase: -- "$@")
[ ! $? = 0 ] && show_usage
eval set -- "$OPTS"

while [ -n "$1" ] ; do case "$1" in
    -m | --mode         ) mode="$2"     ; shift 2 ;;
    -t | --type         ) type="$2"     ; shift 2 ;;
    -v | --version      ) version="$2"  ; shift 2 ;;
    -l | --logbase      ) LogTimes="$2" ; shift 2 ;;
    -d | --debug        ) debug=1       ; shift   ;;
         --             ) shift         ; break   ;;
esac ; done

################################################################################################ Set Variables

AppName=qBittorrent
AppNameLower=qbittorrent
Need_SourceCode=yes
pm_action=install

if [[ -f /etc/inexistence/00.Installation/function ]]; then
    source /etc/inexistence/00.Installation/function
else
    wget -qO /tmp/function https://github.com/Aniverse/inexistence/raw/master/00.Installation/function
    source /tmp/function
fi

set_variables_log_location
[[ $debug == 1 ]] && debug_log_location

git_repo="https://github.com/qbittorrent/qBittorrent"
lt_version=$(pkg-config --exists --print-errors "libtorrent-rasterbar >= 3.0.0" 2>&1 | awk '{print $NF}' | grep -oE [0-9.]+)

[[ -z $mode ]] && [[ -n $version ]] && mode=source
check_remote_git_repo_branch  $git_repo  "release-$version"
[[ ! $mode =~ (apt|ppa|source) ]] && echo -e "${CW} Mode can only be specified as apt, ppa or source${normal}" && exit 1
[[ $mode == ppa ]] && [[ $DISTRO != Ubuntu ]] && echo -e "${normal}PPA is not support for $DISTRO, change installation mode from ppa to apt" && mode=apt
[[ $mode == apt ]] && grep qbittorrent -q /etc/apt/sources.list && echo -e "${normal}qBittorrent PPA detected, change installation mode from apt to ppa" && mode=ppa

[[ -z $type ]] && type=headless
[[ ! $type =~ (headless|desktop) ]] && echo -e "${CW} Type can only be specified as headless or desktop${normal}" && exit 1
if [[ $type == desktop ]]; then
    package_name=qbittorrent
    compile_flag=''
else
    package_name=qbittorrent-nox
    compile_flag='--disable-gui'
fi

################################################################################################ Sub functions

function install_qbittorrent_apt() {
    echo >> $OutputLOG
    status_lock=$AppNameLower
    echo "status_lock=$status_lock" > /tmp/Variables
    rm -f /tmp/$status_lock.1.lock /tmp/$status_lock.2.lock
    apt-get install -y $package_name >> $OutputLOG 2>&1 && touch /tmp/$status_lock.1.lock || touch /tmp/$status_lock.2.lock
    [[ -f /tmp/$status_lock.1.lock ]] && touch $LOCKLocation/${AppNameLower}{,.apt}.lock
    echo >> $OutputLOG
}


function install_qbittorrent_ppa() {
    status_lock=$AppNameLower
    echo "status_lock=$status_lock" > /tmp/Variables
    rm -f /tmp/$status_lock.1.lock /tmp/$status_lock.2.lock 
    add-apt-repository -y ppa:qbittorrent-team/qbittorrent-stable >> $OutputLOG 2>&1
    apt-get update >> $OutputLOG 2>&1
    apt-get install -y $package_name >> $OutputLOG 2>&1 && touch /tmp/$status_lock.1.lock || touch /tmp/$status_lock.2.lock
    [[ -f /tmp/$status_lock.1.lock ]] && touch $LOCKLocation/${AppNameLower}{,.apt,.ppa}.lock
    echo >> $OutputLOG
}


function install_qbittorrent_dependencies() {
    echo >> $OutputLOG
    [[ -z $lt_version ]] && { echo -e "${CW} No libtorrnt-rasterbar found${normal}" ; exit 1 ; }

    if version_ge $version 4.2.0 ; then
        qt_required_version=5.9.0
    else
        qt_required_version=5.5.1
    fi

    if [[ $CODENAME == jessie ]]; then
        apt-get purge -y qtbase5-dev qttools5-dev-tools libqt5svg5-dev >> $OutputLOG 2>&1
        apt-get autoremove -y >> $OutputLOG 2>&1
        apt-get install -y libgl1-mesa-dev >> $OutputLOG 2>&1
        wget -nv https://github.com/Aniverse/inexistence/raw/files/debian.package/qt.5.5.1.jessie.amd64.deb -O qt.5.5.1.jessie.amd64.deb >> $OutputLOG 2>&1
        dpkg -i qt.5.5.1.jessie.amd64.deb >> $OutputLOG 2>&1
        rm -f qt.5.5.1.jessie.amd64.deb
        export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/local/Qt-5.5.1/lib/pkgconfig
        export PATH=/usr/local/Qt-5.5.1/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
        qmake --version >> $OutputLOG 2>&1
    else
        apt-get install -y qtbase5-dev qttools5-dev-tools libqt5svg5-dev >> $OutputLOG 2>&1 &&
        touch /tmp/$status_lock.1.lock || touch /tmp/$status_lock.2.lock
    fi

    status_lock=$AppNameLower-d
    echo "status_lock=$status_lock" > /tmp/Variables
    rm -f /tmp/$status_lock.1.lock /tmp/$status_lock.2.lock 

    qt_version=$(pkg-config --exists --print-errors "Qt5Core >= 10086" 2>&1 | awk '{print $NF}' | grep -oE [0-9.]+)
    version_ge  $qt_version  $qt_required_version && touch /tmp/$status_lock.1.lock || touch /tmp/$status_lock.2.lock

    [[ -f /tmp/$status_lock.1.lock ]] && touch $LOCKLocation/$AppNameLower.dependencies.lock
    echo >> $OutputLOG
}


function compile_qbittorrent() {
    echo >> $OutputLOG
    rm -rf qBittorrent-$version
    git clone https://github.com/qbittorrent/qBittorrent qBittorrent-$version >> $OutputLOG 2>&1
    cd qBittorrent-$version

    if [[ $version == 4.3.0 ]]; then
        git checkout master >> $OutputLOG 2>&1
    elif [[ $version == 3.3.11.1 ]]; then
        # Add skip hash check function for 3.3.11
        git checkout release-3.3.11 >> $OutputLOG 2>&1
        git config --global user.email "you@example.com" >> $OutputLOG 2>&1
        git config --global user.name "Your Name" >> $OutputLOG 2>&1
        git cherry-pick db3158c >> $OutputLOG 2>&1
        git cherry-pick b271fa9 >> $OutputLOG 2>&1
    elif [[ $version == 4.1.2 ]]; then
        # Fix Webui cannot be reached
        git checkout release-$qb_version >> $OutputLOG 2>&1
        git config --global user.email "you@example.com" >> $OutputLOG 2>&1
        git config --global user.name "Your Name" >> $OutputLOG 2>&1
        git cherry-pick 262c3a7 >> $OutputLOG 2>&1
    else
        git checkout release-$version >> $OutputLOG 2>&1
    fi

    ./configure --prefix=/usr $compile_flag >> $OutputLOG 2>&1
    make -j$MAXCPUS >> $OutputLOG 2>&1
    make install DESTDIR=$SCLocation/tmp-$AppNameLower  >> $OutputLOG 2>&1

    status_lock=$AppNameLower
    echo "status_lock=$status_lock" > /tmp/Variables
    rm -f /tmp/$status_lock.1.lock /tmp/$status_lock.2.lock

    if [[ -n $(which fpm) ]]; then
        fpm -f -C $SCLocation/tmp-$AppNameLower -s dir -t deb -n $AppNameLower --version $version \
            -p $DebLocation/$AppNameLower-$version-$CODENAME-$arch.deb \
            --description "bittorrent client based on libtorrent-rasterbar (without X support), installed by inexistence" >> $OutputLOG 2>&1
        dpkg -i $DebLocation/$AppNameLower-$version-$CODENAME-$arch.deb >> $OutputLOG 2>&1 # && touch /tmp/$status_lock.1.lock || touch /tmp/$status_lock.2.lock
    else
        make install >> $OutputLOG 2>&1 # && touch /tmp/$status_lock.1.lock || touch /tmp/$status_lock.2.lock
    fi

    # [[ -f /tmp/$status_lock.1.lock ]] && touch $LOCKLocation/$AppNameLower.lock
    echo >> $OutputLOG
}


function check_status_qbt() {
    qb_installed_ver=$(eval $package_name --version 2>&1 | awk '{print $2}' | grep -oE "[0-9.]+")
    if [[ -z $qb_installed_ver ]]; then
        echo -e " ${red}${bold}FAILED${normal}"
    elif [[ $qb_installed_ver == $version ]]; then
        echo -e " ${green}${bold}DONE${normal}"
        touch $LOCKLocation/$AppNameLower{,.source}.lock
    else
        echo -e " ${red}${bold}FAILED: $qb_installed_ver is installed rather than $version${normal}"
    fi
}


################################################################################################ Main


if dpkg -l | grep $AppNameLower -q ; then
    echo -ne "Uninstalling old qBittorrent ... " | tee -a $OutputLOG
    apt-get purge -y qbittorrent-nox >> $OutputLOG 2>&1
    dpkg -r qbittorrent-nox >> $OutputLOG 2>&1
    apt-get autoremove -y >> $OutputLOG 2>&1
    echo -e "${green}${bold}DONE${normal}" | tee -a $OutputLOG
fi


case $mode in
    apt     ) echo -ne "Installing $AppName from $CODENAME repo ..." | tee -a $OutputLOG
              install_qbittorrent_apt & spinner $!
              check_status | tee -a $OutputLOG
              ;;

    ppa    )  echo -ne "Installing $AppName from stable ppa ..." | tee -a $OutputLOG
              install_qbittorrent_ppa & spinner $!
              check_status | tee -a $OutputLOG
              ;;

    source  ) if [[ ! -f $LOCKLocation/$AppNameLower.dependencies.lock ]]; then
                  echo -ne "Installing $AppName build dependencies ..." | tee -a $OutputLOG
                  install_qbittorrent_dependencies & spinner $!
                  check_status $status_lock
              fi

              echo -ne "Installing $AppName ${bold}${cyan}$version${normal} from source codes ..." | tee -a $OutputLOG
              compile_qbittorrent & spinner $!
              check_status_qbt | tee -a $OutputLOG
              ;;
esac






###################### deprecated ######################

function deprecated_codes() {

    if [[ -n $(which checkinstalll) ]]; then
        apt-cache show libtorrent-rasterbar | grep inexistence -q && dpkg -r libtorrent-rasterbar
        mkdir -p doc-pak && echo "qBittorrent BitTorrent client headless (qbittorrent-nox)" > description-pak
        checkinstall -y --pkgname=qbittorrent-nox --pkgversion=$version --pkggroup qbittorrent >> $OutputLOG 2>&1
    fi

}

########################################################
