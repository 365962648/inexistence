#!/bin/bash
#
# https://github.com/Aniverse/inexistence
# Author: Aniverse

script_update=2019.07.15
script_version=r10024

################################################################################################ Debug

usage_for_debug() {
    export local_packages=/etc/inexistence/00.Installation
    export s=$local_packages/package/qbittorrent/install
    rm -f $s ; nano $s
    bash $s -v 1.3.15
    bash <(wget -qO- https://github.com/Aniverse/inexistence/raw/master/00.Installation/package/deluge/install) -v 1.3.15
}

################################################################################################ Get options

unset AppName AppNameLower Need_SourceCode pm_action \
      LogRootPath LogTimes DebLocation SCLocation LOCKLocation OutputLOG \
      lt_version version mode debug

function show_usage() { echo " Invalid option $1
Usage:
      -m        Install mode, can only be specified as apt, ppa, source or alt
      -v        Specifiy which version of deluge to be installed
      -b        Specifiy which branch  of deluge to be installed
"
exit 1 ; }

OPTS=$(getopt -o m:v:b:l:d --long "mode:,version:,branch:,logbase:,debug" -- "$@")
[ $? != 0 ] && show_usage
eval set -- "$OPTS"

while [ -n "$1" ] ; do case "$1" in
    -m | --mode         ) mode="$2"     ; shift ; shift ;;
    -v | --version      ) version="$2"  ; shift ; shift ;;
    -b | --branch       ) branch="$2"   ; shift ; shift ;;
    -l | --logbase      ) LogTimes="$2" ; shift 2 ;;
    -d | --debug        ) debug=1       ; shift   ;;
         --             ) shift         ; break   ;;
esac ; done

################################################################################################ Set Variables

AppName=Deluge
AppNameLower=deluge
DebName=deluge # Include deluged, deluge-web, deluge-console and so on
Need_SourceCode=yes
pm_action=install

if [[ -f /etc/inexistence/00.Installation/function ]]; then
    source /etc/inexistence/00.Installation/function
else
    wget -qO /tmp/function https://github.com/Aniverse/inexistence/raw/master/00.Installation/function
    source /tmp/function
fi

set_variables_log_location
[[ $debug == 1 ]] && debug_log_location

################################################################################################ Set Variables 2

lt_version=$(pkg-config --exists --print-errors "libtorrent-rasterbar >= 10086" 2>&1 | awk '{print $NF}' | grep -oE [0-9.]+)

# [[ -z $version ]] && [[ -z $version ]] && [[ -z $mode ]] && version=1.3.15
[[ -z $mode ]] && [[ -n $version ]] && mode=source
[[ -z $mode ]] && [[ -n $branch  ]] && mode=source
[[ -z $mode ]] && echo -e "\n${CW} Installation mode must be specified as apt, deb, deb2, deb3 or source${normal}\n" && cancel

[[ $mode == ppa ]] && [[ $DISTRO != Ubuntu ]] && echo -e "${normal}PPA is not support for $DISTRO, change installation mode from ppa to apt" && mode=apt

[[ -z $latest_stable ]] && latest_stable=2.0.3
# Check if ssl issue should be fix
version_ge $version 1.3.11 || DESSL=Yes
# Check if input branch is available
git_repo="https://github.com/deluge-torrent/deluge"
[[ -n $branch ]] && check_remote_git_repo_branch  $git_repo  $branch
# Check if input version is available
DeSource="http://download.deluge-torrent.org/source"
AvailableVersion=$(  wget -qO- $DeSource | grep -o "deluge-[0-9]\{1,2\}\.[0-9]\{1,2\}\.[0-9]\{1,2\}\.tar.gz" | sort -uV | grep -o "[0-9]\{1,2\}\.[0-9]\{1,2\}\.[0-9]\{1,2\}"  )
[[ -n $version ]] && [[ -z $( echo $AvailableVersion | grep $version ) ]] && echo -e "${CW} The version you input is not available!" && exit 1

[[ -n $version ]] && source_type=release
[[ -n $branch  ]] && source_type=git     # && version=$branch

# Check if libtorrent below 1.1.2 is supported
[[ -n $version ]] && version_ge $version 2.0 && version_ge $lt_ver 1.1.3 ||
{ echo -e "${CW} libtorrent-rasterbar 1.1.3 and later is required when installing deluge 2.0 and above${normal}" && exit 1 ; }

################################################################################################ Sub Functions



function install_deluge_dependencies() {
    echo >> $OutputLOG
    status_lock=$AppNameLower-d
    echo "status_lock=$status_lock" > /tmp/Variables
    rm -f /tmp/$status_lock.1.lock /tmp/$status_lock.2.lock

    # Install Dependencies without python-libtorrent (libtorrent-rasterbar should have been built before)
    apt-get install -y python python-twisted python-openssl python-setuptools python-xdg python-chardet python-notify python-pygame python-glade2  python-mako python-pip \
    intltool geoip-database librsvg2-common xdg-utils \
    >> $OutputLOG 2>&1 && touch /tmp/$status_lock.1.lock || touch /tmp/$status_lock.2.lock

    # This is for deluge 2.0
    pip install --upgrade pip >> $OutputLOG 2>&1
    /usr/local/bin/pip install --upgrade twisted pillow rencode pyopenssl >> $OutputLOG 2>&1

    [[ -f /tmp/$status_lock.1.lock ]] && touch $LOCKLocation/$AppNameLower.dependencies.lock
    echo >> $OutputLOG
}


function fetch_source_codes() {
cd $SCLocation
if   [[ $source_type == release ]]; then
    wget $DeSource/deluge-$version.tar.gz         >> $OutputLOG 2>&1
    tar xf deluge-$version.tar.gz                 >> $OutputLOG 2>&1
    rm -f deluge-$version.tar.gz                  >> $OutputLOG 2>&1
    cd deluge-$version                            >> $OutputLOG 2>&1
elif [[ $source_type ==   git   ]]; then
    git clone https://github.com/deluge-torrent/deluge deluge-$version  >> $OutputLOG 2>&1
    cd deluge-$version   >> $OutputLOG 2>&1
    git checkout $branch >> $OutputLOG 2>&1
fi ; }


# Fix old deluged ssl issue
function deluge_ssl_fix() {
sed -i "s/SSL.SSLv3_METHOD/SSL.SSLv23_METHOD/g" deluge/core/rpcserver.py
sed -i "/        ctx = SSL.Context(SSL.SSLv23_METHOD)/a\        ctx.set_options(SSL.OP_NO_SSLv2 & SSL.OP_NO_SSLv3)" deluge/core/rpcserver.py ; }


# Install deluged to another path which is $SCLocation/deluge-$version-tmp/bin/deluged
function deluge_install_diff() {
DeTmpPath=$SCLocation/deluge-$version-tmp
DeTmpPath2=$SCLocation/deluge-$version-tmp/lib/python2.7/site-packages
mkdir -p $DeTmpPath2
PYTHONPATH=$DeTmpPath2 python setup.py install --prefix=$DeTmpPath >> $OutputLOG 2>&1 ; }





# Install from source code
function install_deluge_source() {

fetch_source_codes

[[ $DESSL == Yes ]] && { deluge_ssl_fix && deluge_install_diff ; version_o=$version ; version=1.3.15 && fetch_source_codes ; }

python setup.py build >> $OutputLOG 2>&1
python setup.py install --install-layout=deb --record /etc/inexistence/01.Log/install_deluge_$version.txt >> $OutputLOG 2>&1 && touch /tmp/de.1.lock || touch /tmp/de.2.lock

[[ $DESSL == Yes ]] && {
mv -f $SCLocation/deluge-$version_o-tmp/bin/deluged /usr/bin/deluged
rm -rf deluge-$version ; version=$version_o
rm -rf $DeTmpPath ; }

rm -rf deluge-$version

[[ -f /tmp/de.1.lock ]] && touch $LOCKLocation/deluge.lock
[[ -f /tmp/de.1.lock ]] && touch $LOCKLocation/deluge.source.$version.lock ; }





# Install another version of deluge (e.g. 1.3.9 for KeepFRDS)
# Have bugs to be fixed
function install_deluge_alt() {

fetch_source_codes

[[ $DESSL == Yes ]] && deluge_old_version_ssl_fix

deluge_install_diff

mv -f $SCLocation/deluge-$version-tmp/bin/deluged /usr/bin/deluged2 && touch /tmp/de.1.lock || touch /tmp/de.2.lock

rm -rf $DeTmpPath

[[ -f /tmp/de.1.lock ]] && touch $LOCKLocation/deluge.alt.lock
[[ -f /tmp/de.1.lock ]] && touch $LOCKLocation/deluge.alt.$version.lock ; }





# Install from PPA
function install_deluge_ppa() {

latest_stable=` wget -qO- https://dev.deluge-torrent.org/wiki/ReleaseNotes | grep wiki/ReleaseNotes | grep -Eo "[12]\.[0-9.]+" | sed 's/">/ /' | awk '{print $1}' | head -n1 `
[[ -z $latest_stable ]] && latest_stable=1.3.15

if   [[ $DISTRO == Debian ]]; then

    echo 'deb http://ppa.launchpad.net/deluge-team/ppa/ubuntu trusty main'        >> /etc/apt/sources.list
    apt-get update                                                                >> $OutputLOG 2>&1
    apt-get install -t trusty deluge deluged deluge-web deluge-console deluge-gtk >> $OutputLOG 2>&1 && touch /tmp/de.1.lock || touch /tmp/de.2.lock

elif [[ $DISTRO == Ubuntu ]]; then

    add-apt-repository -y ppa:deluge-team/ppa         >> $OutputLOG 2>&1
    apt-get update                                    >> $OutputLOG 2>&1
  # apt-get install python-libtorrent                 >> $OutputLOG 2>&1
  # apt-get install -y --allow-change-held-packages --allow-downgrades libtorrent-rasterbar8=1.0.11-1~xenial~ppa1.1 python-libtorrent=1.0.11-1~xenial~ppa1.1 >> $OutputLOG 2>&1
  # apt-mark hold python-libtorrent                   >> $OutputLOG 2>&1
  # apt-mark hold libtorrent-rasterbar8               >> $OutputLOG 2>&1
    apt-get install -t trusty deluge deluged deluge-web deluge-console deluge-gtk >> $OutputLOG 2>&1 && touch /tmp/de.1.lock || touch /tmp/de.2.lock

fi

[[ -f /tmp/de.1.lock ]] && touch $LOCKLocation/deluge.lock
[[ -f /tmp/de.1.lock ]] && touch $LOCKLocation/deluge.ppa.lock ; }





# Install from repository
function install_deluge_apt() {

apt-get install -y deluge deluged deluge-web deluge-console deluge-gtk >> $OutputLOG 2>&1 && touch /tmp/de.1.lock || touch /tmp/de.2.lock

[[ -f /tmp/de.1.lock ]] && touch $LOCKLocation/deluge.lock
[[ -f /tmp/de.1.lock ]] && touch $LOCKLocation/deluge.apt.lock ; }

[[ $mode == apt ]] && {
version=$( apt-cache policy deluge | grep -B1 http | grep -Eo "[012]\.[0-9]+.[0-9]+" | head -n1 )
[[ -z $version ]] && {
[[ $CODENAME == bionic ]] && version=1.3.15 ; [[ $CODENAME == xenial ]] && version=1.3.12 ; [[ $CODENAME == trusty ]] && version=1.3.6
[[ $CODENAME == buster ]] && version=1.3.15 ; [[ $CODENAME == stretch ]] && version=1.3.13 ; [[ $CODENAME == jessie ]] && version=1.3.10 ; } ; }





mkdir -p $SCLocation $LOCKLocation
cd       $SCLocation
echo "\n\n\n$(date "+%Y.%m.%d.%H.%M.%S")   $RN\n\n\n" >> $OutputLOG

case $mode in
    apt     ) echo -ne "Installing deluge ${bold}${cyan}$version${normal} from repository ..."       | tee -a $OutputLOG ; install_deluge_apt & spinner $!
              ;;

    ppa     ) echo -ne "Installing deluge ${bold}${cyan}$latest_stable${normal} from stable ppa ..." | tee -a $OutputLOG ; install_deluge_ppa & spinner $!
              ;;

    source  ) [[ ! -f $LOCKLocation/deluge.dependencies.lock ]] && {
              echo -ne "Installing deluge build dependencies ..." | tee -a $OutputLOG
              install_deluge_dependencies & spinner $!
              _check_status ded ; }

              echo -ne "Installing deluge ${bold}${cyan}$version${normal} from source codes ..."     | tee -a $OutputLOG
              install_deluge_source & spinner $!
              ;;

    alt     ) [[ ! -f $LOCKLocation/deluge.dependencies.lock ]] && {
              echo -ne "Installing deluge build dependencies ..." | tee -a $OutputLOG
              install_deluge_dependencies & spinner $!
              _check_status ded ; }

              echo -ne "Installing another deluge ${bold}${cyan}$version${normal} from source codes ..." | tee -a $OutputLOG 
              install_deluge_alt & spinner $!
              ;;
esac

cd
check_status de

[[ $LogTimes == none ]] && rm -rf /tmp/ttmmpp
