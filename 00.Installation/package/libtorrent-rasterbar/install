#!/bin/bash
#
# https://github.com/Aniverse/inexistence
# Author: Aniverse
#
script_update=2019.07.13
script_version=r11044

################################################################################################ Debug

usage_for_me() {
    export local_packages=/etc/inexistence/00.Installation
    export s=$local_packages/package/libtorrent-rasterbar/install
    rm -f $s ; nano $s
    bash $s -m deb2 --logbase $LogTimes
    bash <(wget -qO- https://github.com/Aniverse/inexistence/raw/master/00.Installation/libtorrent-rasterbar/install) -m deb2
    bash <(wget -qO- https://github.com/Aniverse/inexistence/raw/master/00.Installation/libtorrent-rasterbar/install) -b RC_1_2
}

################################################################################################ Get options

unset AppName AppNameLower Need_SourceCode pm_action \
      LogRootPath LogTimes DebLocation SCLocation LOCKLocation OutputLOG

function show_usage() { echo " Invalid option $1
Usage:
      -m        Install mode, can only be specified as apt, deb, deb2, deb3 or source
      -v        Specifiy which version of libtorrent-rasterbar to be installed
      -b        Specifiy which branchn of libtorrent-rasterbar to be installed
      --debug   Enable debug mode
                Note that installing specific version may cause installation failure
                or the version you installed is not compatible with the version of
                your Deluge or qBittorrent
"
exit 1 ; }

OPTS=$(getopt -o dm:v:b:l: --long debug,mode:,version:,branch:,logbase: -- "$@")
[ ! $? = 0 ] && show_usage
eval set -- "$OPTS"

while [ -n "$1" ] ; do case "$1" in
    -m | --mode         ) mode="$2"     ; shift 2 ;;
    -v | --version      ) version="$2"  ; shift 2 ;;
    -b | --branch       ) branch="$2"   ; shift 2 ;;
    -l | --logbase      ) LogTimes="$2" ; shift 2 ;;
    -d | --debug        ) debug=1       ; shift   ;;
         --             ) shift         ; break   ;;
esac ; done

################################################################################################ Set Variables 1

AppName=libtorrent-rasterbar
AppNameLower=libtorrent-rasterbar
Need_SourceCode=yes
pm_action=install

git_repo="https://github.com/arvidn/libtorrent"

if [[ -f /etc/inexistence/00.Installation/function ]]; then
    source /etc/inexistence/00.Installation/function
else
    wget -qO /tmp/function https://github.com/Aniverse/inexistence/raw/master/00.Installation/function
    source /tmp/function
fi

set_variables_log_location
[[ $debug == 1 ]] && debug_log_location

################################################################################################ Set Variables 2

cancel() { echo -e "${normal}" ; rm -f /tmp/.lt.git.tag ; exit ; }
trap cancel SIGINT

[[ -z $mode ]] && [[ -n $version ]] && mode=source
[[ -z $mode ]] && [[ -n $branch  ]] && mode=source
[[ -z $mode ]] && echo -e "\n${CW} Installation mode must be specified as apt, deb, deb2, deb3 or source${normal}\n" && cancel

[[ -z $MAXCPUS ]] && MAXCPUS=$(nproc)

# Transform version to branch (used for git clone tag)
echo $version | grep -qEo "[012]\.[0-9]+\.[0-9]+" && branch=$( echo libtorrent-$version | sed "s/\./_/g" )
[[ $version == 1.1.11 ]] && branch=libtorrent_1_1_11
[[ $version == 1.1.12 ]] && branch=libtorrent_1_1_12
[[ $version == 1.2.0  ]] && branch=libtorrent_1_2_0

[[ $mode == source ]] && [[ -z $branch ]] && { echo -e "\n${JG} No branch of libtorrent-rasterbar detected, force to use RC_1_1 branch ${normal}\n" ; branch=RC_1_1 ; version=1.1.13 ;  }
[[ $debug == 1 ]] && echo -e "version=$version, branch=$branch, SCLocation=$SCLocation"

check_remote_git_repo_branch  $git_repo  $branch

# Use RC_1_1 if not specified
[[ -z $branch ]] && branch=RC_1_1

# Use 6.6.6 when version cannot be determind
[[ -n $branch ]] && [[ -z $version ]] && version=$( wget -qO- $git_repo/raw/$branch/include/libtorrent/version.hpp | grep LIBTORRENT_VERSION | tail -n1 | grep -oE "[0-9.]+\"" | sed "s/.0\"//" )
[[ -n $branch ]] && [[ -z $version ]] && version=6.6.6

################################################################################################





# Install build dependencies for libtorrent-rasterbar
function install_lt_dependencies() {
    echo >> $OutputLOG
    status_lock=$AppNameLower-d
    echo "status_lock=$status_lock" > /tmp/Variables
    rm -f /tmp/$status_lock.1.lock /tmp/$status_lock.2.lock

    apt_install \
                  build-essential pkg-config autoconf automake libtool git                            \
                  libboost-dev libboost-system-dev libboost-chrono-dev libboost-random-dev libssl-dev \
                  geoip-database libgeoip-dev                                                         \
                  libboost-python-dev                                                                 \
                  zlib1g-dev >> $OutputLOG 2>&1 && touch /tmp/$status_lock.1.lock || touch /tmp/$status_lock.2.lock

    [[ -f /tmp/$status_lock.1.lock ]] && touch $LOCKLocation/$AppNameLower.dependencies.lock
    echo >> $OutputLOG
}





# Install from source codes
function install_lt_source() {

    echo >> $OutputLOG
    status_lock=$AppNameLower
    echo "status_lock=$status_lock" > /tmp/Variables
    rm -f /tmp/$status_lock.1.lock /tmp/$status_lock.2.lock

    [[ -d libtorrent-rasterbar-$version ]] && rm -rf $AppNameLower-$version
    git clone --depth=1 -b $branch $git_repo $AppNameLower-$version >> $OutputLOG 2>&1
    cd $AppNameLower-$version

    # See here for details: https://github.com/qbittorrent/qBittorrent/issues/6383
    # Patches from amefs (QuickBox Dev)
    if version_ge $version 1.2 ; then
        sleep 0 ####### wait
    elif version_ge $version 1.1 ; then
        wget https://github.com/QuickBox/QB/raw/master/setup/sources/libtorrent-rasterbar-RC_1_1.patch >> $OutputLOG 2>&1
        patch -p1 < libtorrent-rasterbar-RC_1_1.patch >> $OutputLOG 2>&1
    elif version_ge $version 1.0 ; then
        wget https://github.com/QuickBox/QB/raw/master/setup/sources/libtorrent-rasterbar-RC_1_0.patch >> $OutputLOG 2>&1
        patch -p1 < libtorrent-rasterbar-RC_1_0.patch >> $OutputLOG 2>&1
    else
        sed -i "s/+ target_specific(),/+ target_specific() + ['-std=c++11'],/" bindings/python/setup.py || NoPatch=1
    fi

    version=$(grep -oE "AC_INIT\(\[libtorrent-rasterbar\],.*" configure.ac | grep -oE "[0-9.]+" | head -1)       # From QuickBox
    ./autotool.sh >> $OutputLOG 2>&1

    if [[ -z $NoPatch ]]; then
        ./configure --enable-python-binding --with-libiconv \
                    --disable-debug --enable-encryption --with-libgeoip=system CXXFLAGS=-std=c++11  >> $OutputLOG 2>&1 # For both Deluge and qBittorrent
    else
        ./configure --enable-python-binding --with-libiconv \
                    --disable-debug --enable-encryption --with-libgeoip=system                      >> $OutputLOG 2>&1
    fi

    # version=$(cat Makefile | grep -i package_version\ \= | cut -d= -f2 | sed 's/ //g')      # From Swizzin

    make -j$MAXCPUS  >> $OutputLOG 2>&1
    rm -rf $SCLocation/tmp-$AppNameLower
    make install     DESTDIR=$SCLocation/tmp-$AppNameLower  >> $OutputLOG 2>&1
    mv $SCLocation/tmp-libtorrent-rasterbar/usr/local/lib/python2.7/site-packages  $SCLocation/tmp-libtorrent-rasterbar/usr/local/lib/python2.7/dist-packages

    if [[ -n $(which fpm) ]]; then
        fpm -f -C $SCLocation/tmp-$AppNameLower -s dir -t deb -n $AppNameLower --version $version \
            -p $DebLocation/$AppNameLower-$version-$CODENAME-$arch.deb \
            --description "an efficient feature complete C++ bittorrent implementation, installed by inexistence" >> $OutputLOG 2>&1
        dpkg -i $DebLocation/$AppNameLower-$version-$CODENAME-$arch.deb >> $OutputLOG 2>&1 && touch /tmp/$status_lock.1.lock || touch /tmp/$status_lock.2.lock
    else
        make install >> $OutputLOG 2>&1 && touch /tmp/$status_lock.1.lock || touch /tmp/$status_lock.2.lock
    fi

    [[ -f /tmp/$status_lock.1.lock ]] && touch $LOCKLocation/$AppNameLower.lock
    [[ -f /tmp/$status_lock.1.lock ]] && touch $LOCKLocation/$AppNameLower.source.$branch.lock
    echo >> $OutputLOG

}





# Install from pre-compiled deb package (libtorrent-rasterbar8, based on RC_1_0 #62c96797a06a024dc17a44931c19afe6f7bd7d6c with python-binding fix)
function install_lt8_deb() {
    echo >> $OutputLOG
    status_lock=$AppNameLower
    echo "status_lock=$status_lock" > /tmp/Variables
    rm -f /tmp/$status_lock.1.lock /tmp/$status_lock.2.lock

    [[ $CODENAME == Buster ]] && { echo -e "Error: No libtorrent 1.0.11 deb package for Debian 10, please ust libtorrent 1.1 or later." ; exit 1 ; }
    wget -O lt.$CODENAME.1.0.11.deb https://raw.githubusercontent.com/Aniverse/inexistence/files/debian.package/libtorrent-rasterbar-1.0.11.$CODENAME.amd64.deb >> $OutputLOG 2>&1
    dpkg -i lt.$CODENAME.1.0.11.deb >> $OutputLOG 2>&1 && touch /tmp/$status_lock.1.lock || touch /tmp/$status_lock.2.lock

    echo >> $OutputLOG
    [[ -f /tmp/$status_lock.1.lock ]] && touch $LOCKLocation/$AppNameLower.lock
    [[ -f /tmp/$status_lock.1.lock ]] && touch $LOCKLocation/$AppNameLower.deb.lock
}





# Install from pre-compiled deb package
# libtorrent-rasterbar9, based on RC_1_1 6f1250c6535730897909240ea0f4f2a81937d21a
# with python-binding fix (from amefs) and #5a48292aefd6ebffd5be6b237081ba2d978a2caa fix (Announce only once to private trackers, by Airium)
function install_lt9_deb() {
    echo >> $OutputLOG
    status_lock=$AppNameLower
    echo "status_lock=$status_lock" > /tmp/Variables
    rm -f /tmp/$status_lock.1.lock /tmp/$status_lock.2.lock

    wget -O lt.$CODENAME.1.1.13.deb https://raw.githubusercontent.com/Aniverse/inexistence/files/debian.package/libtorrent-rasterbar-1.1.13.1.$CODENAME.amd64.cpp11.deb >> $OutputLOG 2>&1
    dpkg -i lt.$CODENAME.1.1.13.deb >> $OutputLOG 2>&1 && touch /tmp/$status_lock.1.lock || touch /tmp/$status_lock.2.lock

    echo >> $OutputLOG
    [[ -f /tmp/$status_lock.1.lock ]] && touch $LOCKLocation/$AppNameLower.lock
    [[ -f /tmp/$status_lock.1.lock ]] && touch $LOCKLocation/$AppNameLower.deb.lock
}





function install_lt_dependencies_action() {
    [[ ! -f $LOCKLocation/libtorrent-rasterbar.dependencies.lock ]] && {
        echo -ne "Installing libtorrent-rasterbar build dependencies ..." | tee -a $OutputLOG
        install_lt_dependencies & spinner $!
        check_status $status_lock | tee -a $OutputLOG ; }
}






case $mode in
    deb     ) install_lt_dependencies_action

              echo -ne "Installing libtorrent-rasterbar ${bold}${cyan}1.0.11${normal} from pre-compiled deb package ..." | tee -a $OutputLOG
              install_lt8_deb & spinner $!
              ;;

    deb2    ) install_lt_dependencies_action

              echo -ne "Installing libtorrent-rasterbar ${bold}${cyan}1.1.13${normal} from pre-compiled deb package ..." | tee -a $OutputLOG
              install_lt9_deb & spinner $!
              ;;

    source  ) install_lt_dependencies_action

              if echo $branch | grep -qEo "[012]_[0-9]_[0-9]+"; then
                  echo -ne "Installing libtorrent-rasterbar ${bold}${cyan}$version${normal} from source codes ..." | tee -a $OutputLOG
              else
                  echo -ne "Installing libtorrent-rasterbar ${bold}$branch branch (${cyan}$version${jiacu})${normal} from source codes ..." | tee -a $OutputLOG
              fi

              install_lt_source & spinner $!
              ;;
esac

cd ; ldconfig

status_lock=$AppNameLower
ltver_py=$(python -c "import libtorrent ; print libtorrent.version" 2>1 | grep -oE [0-9]+.[0-9]+.[0-9]+)
ltver=$(pkg-config --exists --print-errors "libtorrent-rasterbar >= 3.0.0" 2>&1 | awk '{print $NF}' | grep -oE [0-9]+.[0-9]+.[0-9]+)

if [[ -f /tmp/$status_lock.1.lock ]]; then
    if [[ -z $ltver_py ]]; then
        echo -e " ${red}${bold}ERROR: no python-libtorrent!${normal}" | tee -a $OutputLOG
    elif [[ $ltver != $version ]]; then
        echo -e " ${red}${bold}ERROR: $ltver is installed rather than $version${normal}" | tee -a $OutputLOG
    else
        echo -e " ${green}${bold}DONE${normal}" | tee -a $OutputLOG
    fi
elif [[ -f /tmp/$status_lock.2.lock ]]; then
    echo -e " ${red}${bold}FAILED${normal}" | tee -a $OutputLOG
else
    echo -e " ${red}${bold}Unknown State${normal}" | tee -a $OutputLOG
fi




###################### deprecated ######################

function deprecated_codes() {

    # Random number for marking different installations
    [[ $mode == source ]] && RN=$(shuf -i 1-999 -n1)

    # Check if input branch exists
    [[ ! -z $branch ]] && [[ ! $( wget -qO- "https://github.com/arvidn/libtorrent" | grep data-name | cut -d '"' -f2 | grep -P "$branch\b" ) ]] && { echo -e "\n${CW} No such branch!\n" ; exit 1 ; }

    if [[ -n $(which checkinstalll) ]]; then
        apt-cache show libtorrent-rasterbar | grep inexistence -q && dpkg -r libtorrent-rasterbar
        mkdir -p doc-pak && echo "an efficient feature complete C++ bittorrent implementation, installed by inexistence" > description-pak
        checkinstall -y --pkgname=libtorrent-rasterbar --pkggroup libtorrent --pkgversion $version >> $OutputLOG 2>&1 && touch /tmp/lt.1.lock || touch /tmp/lt.2.lock
    fi

}

########################################################
